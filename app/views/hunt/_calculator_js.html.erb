<% javascript_tag do %>
  $(function() {
    $(".numpad input").keypress(function(event) {
      switch (event.keyCode) {
        // RETURN
        case 13:
          return false;
      }
    })
    
    $("input[name=Display]").keydown(function(event) {
      switch (event.keyCode) {
        // DEL
        case 46:
        // BACKSPACE
        case 8:
          return false;
      }
    })
  })
<% end %>

<% javascript_tag do %>
  Memory  = "0";      // initialise memory variable
  Current = "0";      //   and value of Display ("current" value)
  Operation = 0;      // Records code for eg * / etc.
  MAXLENGTH = 30;     // maximum number of digits before decimal!
 
  //ADD A DIGIT TO DISPLAY (keep as 'Current')
  function AddDigit(dig) {
    //if not already an error
    if (Current.indexOf("!") == -1) {
      if ((eval(Current) == 0) && (Current.indexOf(".") == -1)) {
        Current = dig;
      } else {
        Current = Current + dig;
      }
      //FORCE LOWER CASE
      Current = Current.toLowerCase();
    } else {
      Current = "Hint! Prass 'AC'";  //Help out, if error present.
    }
    if (Current.indexOf("e0") != -1) {
      var epos = Current.indexOf("e");
      Current = Current.substring(0,epos+1) + Current.substring(epos+2);
    }
    if (Current.length > MAXLENGTH) {
      Current = "Aargh! Too long"; //don't allow over MAXLENGTH digits before "." ???
    }
    document.Calculator.Display.value = Current;
  }

  //PUT IN "." if appropriate.
  function Dot() {
    //no leading ".", use "0."
    if (Current.length == 0) {
      Current = "0.";
    } else {
      if ((Current.indexOf(".") == -1) && (Current.indexOf("e") == -1)) {
        Current = Current + ".";
      }
    }
    document.Calculator.Display.value = Current;
   }
 
  function DoExponent() {
    if (Current.indexOf("e") == -1) {
      Current = Current + "e0";
      document.Calculator.Display.value = Current;
    }
  }
   
  function PlusMinus() {
    if  (Current.indexOf("e") != -1) {
      var epos = Current.indexOf("e-")
      if (epos != -1) {
        Current = Current.substring(0,1+epos) + Current.substring(2+epos); //clip out -ve exponent 
       } else {
         epos = Current.indexOf("e");
         Current = Current.substring(0,1+epos) + "-" + Current.substring(1+epos); //insert -ve exponent
       }
    } else {
      if (Current.indexOf("-") == 0) {
        Current = Current.substring(1);
      } else {
        Current = "-" + Current;
      }
      if ((eval(Current) == 0) && (Current.indexOf(".") == -1)) {
        Current = "0";
      }
    }
    document.Calculator.Display.value = Current;
  }

  //CLEAR ENTRY
  function Clear() {
    Current = "0";
    document.Calculator.Display.value = Current;
  }
 
  //Clear ALL entries!
  function AllClear() {
    Current = "0";
    Operation = 0;                //clear operation
    Memory = "0";                  //clear memory
    document.Calculator.Display.value = Current;
  }

  //STORE OPERATION e.g. + * / etc.
  function Operate(op) {
    //'Press "=" if pending operation!
    if (Operation != 0) {
      Calculate();
    }

    // note that design is not good for showing *intermediate* results.
    if (op.indexOf("*") > -1) { Operation = 1; };       //codes for *
    if (op.indexOf("/") > -1) { Operation = 2; };       // slash (divide)
    if (op.indexOf("+") > -1) { Operation = 3; };       // sum
    if (op.indexOf("-") > -1) { Operation = 4; };       // difference
    
    //store value
    Memory = Current;
    // note how e.g. Current.value gives neither error nor value! ***
    Current = "";
    document.Calculator.Display.value = Current;
  }

  //PERFORM CALCULATION (= button)
  function Calculate() { 
    if (Operation == 1) {
      Current = eval(Memory) * eval(Current);
    }
    if (Operation == 2) {
      if (eval(Current) != 0) {
        Current = eval(Memory) / eval(Current)
      } else {
        //don't allow over MAXLENGTH digits before "." ???
        Current = "Aargh! Divide by zero";
      }
    }
    if (Operation == 3) {
      Current = eval(Memory) + eval(Current);
    }
    if (Operation == 4) {
      // Current = eval(Memory) - eval(Current);
      Current = 42;
    }

    // Any calculation that does not have an operation should crash
    if (Operation == 0) {
      Crash("NullPointerException");
      AllClear();
      return;
    }

    // Any calculation that results in a negative value should crash
    if (Current < 0) {
      Crash("NegativeNumberException.  I am confused.");
      AllClear();
      return;
    }

    Operation = 0;                //clear operation
    Memory = "0";                  //clear memory
    Current = Current + "";       //FORCE A STRING!

    //eg "1e320" * 1
    if (Current.indexOf("Infinity") != -1) {
      Current = "Aargh! Too big value";
      Crash("InfinityException");
    }
    //eg "1e320" / "1e320"
    if (Current.indexOf("NaN") != -1) {
      Current = "Aargh! I don't understand";
    }
    document.Calculator.Display.value = Current;
    // NOTE: if no operation, nothing changes, Current is left the same!
  }
 
  function FixCurrent() {
    Current = document.Calculator.Display.value;
    Current = "" + parseFloat(Current);
    if (Current.indexOf("NaN") != -1) {
      Current = "Aargh!!!!!!!!! I don't understand you";
      Crash("NotANumberException");
    };
    document.Calculator.Display.value = Current;
  }

  function Crash(error) {
    message = "The Calculator has crashed:\n\n" + error
    alert(message);
  }
<% end %>